import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class RPS extends JFrame implements ActionListener {
    //array med möjliga värden i enumen Options, används vid slumpning
    private static final Options[] optionsArr = Options.values();
    private JButton rock, paper, scissors;
    private JLabel stats;

    private int wins = 0;
    private int runs = 0;

    private enum Options{
        ROCK,
        PAPER,
        SCISSORS
    }

    public RPS() {
        rock = new JButton("Sten");
        paper = new JButton("Påse");
        scissors = new JButton("Sax");
        stats = new JLabel("Du har vunnit 0/0 gånger.", JLabel.CENTER);

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(rock);
        buttonPanel.add(paper);
        buttonPanel.add(scissors);

        rock.addActionListener(this);
        paper.addActionListener(this);
        scissors.addActionListener(this);

        add(buttonPanel, BorderLayout.CENTER);
        add(stats, BorderLayout.SOUTH);

        pack();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);        
    }

    public void actionPerformed(ActionEvent e) {
        Options userOpt = null;
        // Eventuellt spara ner e.getSource() i en lokal variabel först
        // istället för att anropa metoden två gånger. (Vilken typ ska
        // den variabeln i så fall ha?)
        if (e.getSource() == rock) {
            userOpt = Options.ROCK;
        } else if (e.getSource() == paper) { 
            userOpt = Options.PAPER;
        } else {
            userOpt = Options.SCISSORS;
        }
        Options computerOpt = rndOption();
        int winner = cmpOptions(computerOpt, userOpt);
        String message;
        if (winner == 1) {
            message = "Datorn valde " + computerOpt + ", datorn vann.";
        } else if (winner == 0){
            message = "Datorn valde också " + computerOpt + ", oavgjort.";
        } else {
            message = "Datorn valde " + computerOpt + ", du vann.";
            wins++;
        }
        runs++;
        String tmpString = String.format("Du har vunnit %d/%d gånger.", wins, runs);
        stats.setText(tmpString);
        JOptionPane.showMessageDialog(this, message);
    }

    // Slumpa fram ett Options-värde
    private static Options rndOption() {
        return optionsArr[(int)(Math.random()*optionsArr.length)];
    }

    // Jämför två options, vem vann? Kutym i java - returnera ett tal x, x > 0
    // om första argumentet är "större än" det andra, x == 0 om de är lika och
    // x < 0 om första argumentet är "mindre än" det andra.
    private static int cmpOptions(Options o1, Options o2) {
        if (o1==o2) {
            return 0;
        } else if (    (o1==Options.ROCK && o2==Options.SCISSORS)
                    || (o1==Options.SCISSORS && o2==Options.PAPER)
                    || (o1==Options.PAPER && o2==Options.ROCK)) {
            return 1;
        } else {
            return -1;
        }
    }

    public static void main(String[] args) {
        new RPS();
        /* Enkelt test av rndOption och cmpOptions.
        for (int i=0;i<20;i++) {
            Options o1 = rndOption();
            Options o2 = rndOption();
            System.out.println(o1 + " " + o2 + ": " + cmpOptions(o1,o2));
        }*/
    }

}